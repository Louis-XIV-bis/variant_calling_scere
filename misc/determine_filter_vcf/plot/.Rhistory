guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_low_s_chr2
plot_ctrl_chr2 = data_chr2 %>%
filter(s == 0.05) %>%
ggplot(aes(x = alpha, y = mean, color = alpha)) +
geom_point(size = 6) +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.1, linewidth = 1.3) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = expression(alpha),
y = expression("average " ~ pi ~ "(chromosome 2)"),
color = expression(alpha),
fill = expression(alpha),
linetype = expression(alpha)) +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_ctrl_chr2
plot_high_s_chr2 = data_chr2 %>%
filter(s == 0.1) %>%
ggplot(aes(x = alpha, y = mean, color = alpha)) +
geom_point(size = 6) +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.1, linewidth = 1.3) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = expression(alpha),
y = expression("average " ~ pi ~ "(chromosome 2)"),
color = expression(alpha),
fill = expression(alpha),
linetype = expression(alpha)) +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_high_s_chr2
# Extract the legend from the main plot
all_components <- get_plot_component(plot_ctrl_chr1, "guide-box", return_all = TRUE)
legend_only <- all_components[[4]]  # Adjust the index if needed
# Create the grid of plots using plot_grid
combined_plot <- plot_grid(
plot_low_s_chr1 + theme(plot.margin = margin(l = 23)),
plot_ctrl_chr1 + theme(legend.position = "none", plot.margin = margin(l = 23)),
plot_high_s_chr1 + theme(plot.margin = margin(l = 23)),
plot_low_s_chr2 + theme(plot.margin = margin(l = 23, t = 23)),
plot_ctrl_chr2 + theme(plot.margin = margin(l = 23, t = 23)),
plot_high_s_chr2 + theme(plot.margin = margin(l = 23, t = 23)),
NULL, legend_only, NULL,
rel_heights = c(3,3,0.5),
rel_widths = c(1.2,1,1),
ncol = 3, nrow = 3, labels = c("A","B","C","D","E","F"), label_size = 20
)
combined_plot
ggsave("fig3_v1.png", plot = combined_plot, width = 16, height = 12, units = "in",bg = "white")
rm(list=ls())
library(ggplot2)
library(readr)
library(tibble)
library(dplyr)
library(sjPlot)
library(RColorBrewer)
library(cowplot)
rm(list=ls())
# Subset data for ctrl and neutral condition
data_chr1 = read_csv('../data/pi_merged.csv') %>%
filter(h == 0.5 & rho == '5e-08' & s > 0) %>%
mutate(alpha = as.factor(1 / GR)) %>%
mutate(ymin = mean - sd, ymax = mean + sd) %>%
filter(window != 'chr2') %>%
mutate(window = as.numeric(window) / 1000000)
data_chr1
# Subset data for ctrl and neutral condition
data_chr2 = read_csv('../data/pi_merged.csv') %>%
filter(window == 'chr2') %>%
filter(h == 0.5 & rho == '5e-08' & s > 0) %>%
mutate(alpha = as.factor(1 / GR)) %>%
mutate(ymin = mean - sd, ymax = mean + sd)
data_chr2
# Explicitly set the y-axis limits to be the same for both plots
y_axis_limits <- c(-1e-5, 8e-05)
# Create color palette
num_conditions <- length(unique(data_chr1$alpha))
palette_name <- "Dark2"
colors <- brewer.pal(n = num_conditions, name = palette_name)
# Using the extracted color palette for both geom_line and geom_ribbon
plot_low_s_chr1 = data_chr1 %>%
filter(s == 0.02) %>%
ggplot(aes(x = window, y = mean, group = alpha)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = alpha), alpha = 0.2) +
geom_line(aes(color = alpha)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
y = expression(pi ~ "along chromosome 1")) +
theme_light() +
ggtitle("s = 0.02") +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 20, hjust = 0.5)
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_low_s_chr1
plot_ctrl_chr1 = data_chr1 %>%
filter(s == 0.05) %>%
ggplot(aes(x = window, y = mean, group = alpha)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = alpha), alpha = 0.2) +
geom_line(aes(color = alpha)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)",
color = expression(alpha),
fill = expression(alpha),
linetype = expression(alpha)) +
theme_light() +
ggtitle("s = 0.05") +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
legend.title = element_text(size = 20),
legend.text = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5)) +
scale_y_continuous(limits = y_axis_limits)
plot_ctrl_chr1
plot_high_s_chr1 = data_chr1 %>%
filter(s == 0.1) %>%
ggplot(aes(x = window, y = mean, group = alpha)) +
geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = alpha), alpha = 0.2) +
geom_line(aes(color = alpha)) +
scale_color_manual(values = colors) +
scale_fill_manual(values = colors) +
labs(x = "Sequence position (Mbp)") +
theme_light() +
ggtitle("s = 0.1") +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 17),
axis.text.y = element_blank(),
plot.title = element_text(size = 20, hjust = 0.5)
) +
guides(color = "none", fill = "none") +
scale_y_continuous(limits = y_axis_limits)
plot_high_s_chr1
# Assuming `colors` is a predefined vector of colors
plot_chr2 = data_chr2 %>%
ggplot(aes(x = alpha, y = mean, group = interaction(alpha, s))) +
geom_point(aes(shape = factor(s), color = factor(alpha)),
size = 6, position = position_dodge(width = 0.3)) +
geom_errorbar(aes(ymin = ymin, ymax = ymax, color = factor(alpha)),
width = 0.1, linewidth = 1.3, position = position_dodge(width = 0.3)) +
scale_shape_manual(values = c(16, 15, 17)) +  # Shapes: dot, square, triangle
scale_color_manual(values = colors) +
labs(x = expression(alpha),
y = expression("average " ~ pi ~ "(chromosome 2)"),
shape = "s",
color = expression(alpha)) +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_text(size = 18),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18)
) +
scale_y_continuous(limits = y_axis_limits)
plot_chr2
# Extract the legend from the main plot
all_components <- get_plot_component(plot_ctrl_chr1, "guide-box", return_all = TRUE)
legend_only <- all_components[[1]]  # Adjust the index if needed
# First row: 3 plots with the same relative widths
first_row <- plot_grid(
plot_low_s_chr1 + theme(plot.margin = margin(l = 23)),
plot_ctrl_chr1 + theme(legend.position = "none", plot.margin = margin(l = 23)),
plot_high_s_chr1 + theme(plot.margin = margin(l = 23)),
ncol = 3, rel_widths = c(1.2, 1, 1), labels = c("A", "B", "C"), label_size = 20
)
# Second row: plot_chr2 spanning two columns and legend_only in the third column
second_row <- plot_grid(
plot_chr2 + theme(plot.margin = margin(l = 23, t = 23)),
legend_only,
ncol = 2, rel_widths = c(2.5, 1),
labels = c("D"), label_size = 20
)
# Combine the two rows into one plot
combined_plot <- plot_grid(
first_row,
second_row,
ncol = 1, rel_heights = c(3, 3, 0.5),
)
combined_plot
# Combine the two rows into one plot
combined_plot <- plot_grid(
first_row,
second_row,
ncol = 1, rel_heights = c(3, 3, 0.5)
)
combined_plot
# Assuming `colors` is a predefined vector of colors
plot_chr2 = data_chr2 %>%
ggplot(aes(x = alpha, y = mean, group = interaction(alpha, s))) +
geom_point(aes(shape = factor(s), color = factor(alpha)),
size = 6, position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = ymin, ymax = ymax, color = factor(alpha)),
width = 0.1, linewidth = 1.3, position = position_dodge(width = 0.3)) +
scale_shape_manual(values = c(16, 15, 17)) +  # Shapes: dot, square, triangle
scale_color_manual(values = colors) +
labs(x = expression(alpha),
y = expression("average " ~ pi ~ "(chromosome 2)"),
shape = "s",
color = expression(alpha)) +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_text(size = 18),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18)
) +
scale_y_continuous(limits = y_axis_limits)
plot_chr2
# Assuming `colors` is a predefined vector of colors
plot_chr2 = data_chr2 %>%
ggplot(aes(x = alpha, y = mean, group = interaction(alpha, s))) +
geom_point(aes(shape = factor(s), color = factor(alpha)),
size = 6, position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = ymin, ymax = ymax, color = factor(alpha)),
width = 0.1, linewidth = 1.3, position = position_dodge(width = 0.5)) +
scale_shape_manual(values = c(16, 15, 17)) +  # Shapes: dot, square, triangle
scale_color_manual(values = colors) +
labs(x = expression(alpha),
y = expression("average " ~ pi ~ "(chromosome 2)"),
shape = "s",
color = expression(alpha)) +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_text(size = 18),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18)
) +
scale_y_continuous(limits = y_axis_limits)
plot_chr2
# Assuming `colors` is a predefined vector of colors
plot_chr2 = data_chr2 %>%
ggplot(aes(x = alpha, y = mean, group = interaction(alpha, s))) +
geom_point(aes(shape = factor(s), color = factor(alpha)),
size = 6, position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = ymin, ymax = ymax, color = factor(alpha)),
width = 0.1, linewidth = 1.3, position = position_dodge(width = 0.5)) +
scale_shape_manual(values = c(15, 16, 17)) +  # Shapes: dot, square, triangle
scale_color_manual(values = colors) +
labs(x = expression(alpha),
y = expression("average " ~ pi ~ "(chromosome 2)"),
shape = "s",
color = expression(alpha)) +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_text(size = 18),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18)
) +
scale_y_continuous(limits = y_axis_limits)
plot_chr2
plot_chr2
# Assuming `colors` is a predefined vector of colors
plot_chr2 = data_chr2 %>%
ggplot(aes(x = alpha, y = mean, group = interaction(alpha, s))) +
geom_point(aes(shape = factor(s), color = factor(alpha)),
size = 6, position = position_dodge(width = 0.5)) +
geom_errorbar(aes(ymin = ymin, ymax = ymax, color = factor(alpha)),
width = 0.1, linewidth = 1.3, position = position_dodge(width = 0.5)) +
scale_shape_manual(values = c(15, 16, 17)) +  # Shapes: dot, square, triangle
scale_color_manual(values = colors) +
labs(x = expression(alpha),
y = expression("average " ~ pi ~ "(chromosome 2)"),
shape = "s",
color = expression(alpha)) +
theme_light() +
theme(
axis.title.x = element_text(size = 20),
axis.title.y = element_text(size = 20),
axis.text.x = element_text(size = 17),
axis.text.y = element_text(size = 18),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18)
) +
scale_y_continuous(limits = y_axis_limits) +
guides(color = "none")  # Remove legend for `alpha`
plot_chr2
plot_chr2
# Extract the legend from the main plot
all_components <- get_plot_component(plot_ctrl_chr1, "guide-box", return_all = TRUE)
legend_only <- all_components[[1]]  # Adjust the index if needed
# First row: 3 plots with the same relative widths
first_row <- plot_grid(
plot_low_s_chr1 + theme(plot.margin = margin(l = 23)),
plot_ctrl_chr1 + theme(legend.position = "none", plot.margin = margin(l = 23)),
plot_high_s_chr1 + theme(plot.margin = margin(l = 23)),
ncol = 3, rel_widths = c(1.2, 1, 1), labels = c("A", "B", "C"), label_size = 20
)
# Second row: plot_chr2 spanning two columns and legend_only in the third column
second_row <- plot_grid(
plot_chr2 + theme(plot.margin = margin(l = 23, t = 23)),
legend_only,
ncol = 2, rel_widths = c(2.5, 1),
labels = c("D"), label_size = 20
)
# Combine the two rows into one plot
combined_plot <- plot_grid(
first_row,
second_row,
ncol = 1, rel_heights = c(3, 3, 0.5)
)
combined_plot
ggsave("fig3.png", plot = combined_plot, width = 16, height = 12, units = "in",bg = "white")
rm(list=ls())
setwd("~/Documents/varcall_snakemake/misc/determine_filter_vcf/plot")
annotation = read.table("../results/table_scores_merged.tsv", sep="\t", header=TRUE)
View(annotation)
annotation = read.table("../results/table_scores_merged.tsv", sep="\t", header=TRUE, na.strings=".")
class(annotation)
library(tibble)
annotation = read.table("../results/table_scores_merged.tsv", sep="\t", header=TRUE, na.strings=".") %>%
as_tibble()
class(annotation)
class(annotation)
annotation
num_rows_with_na <- annotation %>%
filter(if_any(everything(), is.na)) %>%
nrow()
annotation = read.table("../results/table_scores_merged.tsv", sep="\t", header=TRUE, na.strings=".") %>%
as_tibble() %>%
drop_na()
library(dplyr)
annotation = read.table("../results/table_scores_merged.tsv", sep="\t", header=TRUE, na.strings=".") %>%
as_tibble() %>%
drop_na()
library(tidyr)
num_rows_with_na <- annotation %>%
filter(if_any(everything(), is.na)) %>%
nrow()
annotation = read.table("../results/table_scores_merged.tsv", sep="\t", header=TRUE, na.strings=".") %>%
as_tibble() %>%
drop_na()
annotation
print(num_rows_with_na)
# Limits, for now the ones selected by Fanny for the 2349 data.
lim.QD = 10
lim.FS = 60
lim.MQ = 50
lim.MQRankSum = -12.5
lim.ReadPosRankSum = -8.0
lim.SOR = 3.0
## DISTRIBUTION
pdf(paste(annot.file,"FiltersDistrib.pdf",sep="_"), width= 12, height = 8)
par(mfrow=c(2,3))
## DISTRIBUTION
pdf(paste("./","FiltersDistrib.pdf",sep="_"), width= 12, height = 8)
par(mfrow=c(2,3))
plot(density(annotations$QD,na.rm=T),main=paste("QD , number of SNPs pre-filter = ",nrow(annotations),sep="") )
annotations = read.table("../results/table_scores_merged.tsv", sep="\t", header=TRUE, na.strings=".") %>%
as_tibble() %>%
drop_na()
annotations
# Limits, for now the ones selected by Fanny for the 2349 data.
lim.QD = 10
lim.FS = 60
lim.MQ = 50
lim.MQRankSum = -12.5
lim.ReadPosRankSum = -8.0
lim.SOR = 3.0
## DISTRIBUTION
pdf(paste("./","FiltersDistrib.pdf",sep="_"), width= 12, height = 8)
par(mfrow=c(2,3))
plot(density(annotations$QD,na.rm=T),main=paste("QD , number of SNPs pre-filter = ",nrow(annotations),sep="") )
abline(v=lim.QD, col="red")
prop.QD=length( which(annotations$QD >lim.QD)) / nrow(annotations)
legend("top", c(paste("Filter: QD >",lim.QD,sep=""),
paste("Prop. pass filter = ", signif(prop.QD,3),sep="")),lty=1,col=c("red", "white"))
plot(density(annotations$FS,na.rm=T),main="FS")
abline(v=lim.FS, col="red")
prop.FS=length( which(annotations$FS <lim.FS)) / nrow(annotations)
legend("top", c(paste("Filter: FS <",lim.FS,sep=""),
paste("Prop. pass filter = ", signif(prop.FS,3),sep="")),lty=1,col=c("red", "white"))
plot(density(annotations$MQ,na.rm=T),main="MQ")
abline(v=lim.MQ, col="red")
prop.MQ=length( which(annotations$MQ >lim.MQ)) / nrow(annotations)
legend("top", c(paste("Filter: MQ >",lim.MQ,sep=""),
paste("Prop. pass filter = ", signif(prop.MQ,3),sep="")),lty=1,col=c("red", "white"))
plot(density(annotations$MQRankSum,na.rm=T),main="MQRankSum")
abline(v=lim.MQRankSum, col="red")
prop.MQRankSum=length( which(annotations$MQRankSum > lim.MQRankSum)) / sum(!is.na(annotations$MQRankSum))
legend("top", c(paste("Filter: MQRankSum >",lim.MQRankSum,sep=""),
paste("Prop. het. SNPs pass filter = ", signif(prop.MQRankSum,3),sep="")),lty=1,col=c("red", "white"))
plot(density(annotations$ReadPosRankSum,na.rm=T),main="ReadPosRankSum")
abline(v=lim.ReadPosRankSum, col="red")
prop.ReadPosRankSum=length( which(annotations$ReadPosRankSum >lim.ReadPosRankSum)) / sum(!is.na(annotations$ReadPosRankSum))
legend("top", c(paste("Filter: ReadPosRankSum >",lim.ReadPosRankSum, "Nb sites heterozyg =",sum(!is.na(annotations$ReadPosRankSum)),sep=""),
paste("Prop. het. SNPs pass filter = ", signif(prop.ReadPosRankSum,3),sep="")),lty=1,col=c("red", "white"))
plot(density(annotations$SOR,na.rm=T),main="SOR")
abline(v=lim.SOR, col="red")
prop.SOR=length( which(annotations$SOR <lim.SOR)) / nrow(annotations)
legend("top", c(paste("Filter: ReadPosRankSum <",lim.SOR,sep=""),
paste("Prop. pass filter = ", signif(prop.SOR,3),sep="")),lty=1,col=c("red", "white"))
dev.off()
### VENN DIAGRAM, intersect of filters
qd.pass = which(annotations$QD>lim.QD)
fs.pass = which(annotations$FS>lim.FS)
sor.pass = which(annotations$SOR > lim.SOR)
mq.pass = which(annotations$MQ < lim.MQ)
mqrs.pass= which(annotations$MQRankSum < lim.MQRankSum)
rprs.pass= which(annotations$ReadPosRankSum < lim.ReadPosRankSum)
venn.diagram(
x=list(qd.pass, mq.pass,sor.pass,mqrs.pqss,rprs.pass),
category.names = c("QD" , "MQ", "SOR","MQRanksSum", "ReadPosRankSum"),
fill = c("blue","darkgreen","orange","yellow","red"),
output=TRUE,
filename = "Venn_5params_Filters"
)
install.packages("VennDiagram")
### VENN DIAGRAM, intersect of filters
qd.pass = which(annotations$QD>lim.QD)
fs.pass = which(annotations$FS>lim.FS)
sor.pass = which(annotations$SOR > lim.SOR)
mq.pass = which(annotations$MQ < lim.MQ)
mqrs.pass= which(annotations$MQRankSum < lim.MQRankSum)
rprs.pass= which(annotations$ReadPosRankSum < lim.ReadPosRankSum)
venn.diagram(
x=list(qd.pass, mq.pass,sor.pass,mqrs.pqss,rprs.pass),
category.names = c("QD" , "MQ", "SOR","MQRanksSum", "ReadPosRankSum"),
fill = c("blue","darkgreen","orange","yellow","red"),
output=TRUE,
filename = "Venn_5params_Filters"
)
library(VennDiagram) #check that VennDiagram is available on the cluster
### VENN DIAGRAM, intersect of filters
qd.pass = which(annotations$QD>lim.QD)
fs.pass = which(annotations$FS>lim.FS)
sor.pass = which(annotations$SOR > lim.SOR)
mq.pass = which(annotations$MQ < lim.MQ)
mqrs.pass= which(annotations$MQRankSum < lim.MQRankSum)
rprs.pass= which(annotations$ReadPosRankSum < lim.ReadPosRankSum)
venn.diagram(
x=list(qd.pass, mq.pass,sor.pass,mqrs.pqss,rprs.pass),
category.names = c("QD" , "MQ", "SOR","MQRanksSum", "ReadPosRankSum"),
fill = c("blue","darkgreen","orange","yellow","red"),
output=TRUE,
filename = "Venn_5params_Filters"
)
annotation
# Limits, for now the ones selected by Fanny for the 2349 data.
lim.QD = 10
lim.FS = 60
lim.MQ = 50
lim.MQRankSum = -12.5
lim.ReadPosRankSum = -8.0
lim.SOR = 3.0
### VENN DIAGRAM, intersect of filters
qd.pass = which(annotations$QD>lim.QD)
fs.pass = which(annotations$FS>lim.FS)
sor.pass = which(annotations$SOR > lim.SOR)
mq.pass = which(annotations$MQ < lim.MQ)
mqrs.pass= which(annotations$MQRankSum < lim.MQRankSum)
rprs.pass= which(annotations$ReadPosRankSum < lim.ReadPosRankSum)
venn.diagram(
x=list(qd.pass, mq.pass,sor.pass,mqrs.pqss,rprs.pass),
category.names = c("QD" , "MQ", "SOR","MQRanksSum", "ReadPosRankSum"),
fill = c("blue","darkgreen","orange","yellow","red"),
output=TRUE,
filename = "Venn_5params_Filters"
)
venn.diagram(
x=list(qd.pass, mq.pass,sor.pass,mqrs.pass,rprs.pass),
category.names = c("QD" , "MQ", "SOR","MQRanksSum", "ReadPosRankSum"),
fill = c("blue","darkgreen","orange","yellow","red"),
output=TRUE,
filename = "Venn_5params_Filters"
)
x = venn.diagram(
x=list(qd.pass, mq.pass,sor.pass,mqrs.pass,rprs.pass),
category.names = c("QD" , "MQ", "SOR","MQRanksSum", "ReadPosRankSum"),
fill = c("blue","darkgreen","orange","yellow","red"),
output=TRUE,
filename = "Venn_5params_Filters"
)
x
